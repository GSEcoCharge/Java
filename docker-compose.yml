# Nome do pipeline
name: Build_Java_Project_$(Build.BuildId)

# Este pipeline será iniciado manualmente
trigger: none  # Definido uma única vez

# Pool de agentes padrão
pool:
  vmImage: 'ubuntu-latest'

# Pipeline
stages:
  - stage: BuildAndTest
    jobs:
      - job: Build
        steps:
          # 1. Fazer checkout do código do repositório
          - checkout: self

          # 2. Instalar a versão do JDK (usando a tarefa JavaToolInstaller com JDK 17)
          - task: UseJavaVersion@1
            inputs:
              versionSpec: '17'
              jdkArchitecture: 'x64'

          # 3. Compilar o projeto e empacotar sem executar testes
          - task: Maven@4
            displayName: 'Compilar e Empacotar Projeto'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              mavenOptions: '-Xmx1024m'

          # 4. Executar os testes (JUnit e/ou Selenium)
          - task: Maven@4
            displayName: 'Executar Testes Unitários'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
            condition: succeededOrFailed() # Continua a execução mesmo se houver falhas nos testes

          # 5. Publicar os resultados dos testes
          - task: PublishTestResults@2
            displayName: 'Publicar Resultados dos Testes Unitários'
            inputs:
              testResultsFiles: '**/surefire-reports/TEST-*.xml'  # Busca os relatórios corretos
              testRunTitle: 'Resultados dos Testes Unitários'
              failTaskOnFailedTests: false  # Não falhar em testes com erro

          # 6. (Opcional) Publicar os artefatos de build
          - task: PublishBuildArtifacts@1
            displayName: 'Publicar Artefatos'
            inputs:
              pathToPublish: '$(System.DefaultWorkingDirectory)/target'
              artifactName: 'java-artifacts'
              publishLocation: 'Container'

